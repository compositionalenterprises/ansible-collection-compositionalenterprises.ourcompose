---
- name: (present) Nginx conf is deployed
  template:
    src: "nginx_commandcenter.conf.j2"
    dest: "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/{{ ourcompose_common_domain }}/commandcenter.conf"

- name: (present) The MariaDB service is up and initialized
  # We're running a while loop to check to ensure that the mariadb database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i mariadb bash -c "while mysql -uroot -p{{ ourcompose_mariadb_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: "{{ ourcompose_common_no_log }}"

- name: (present) Set up the MariaDB database
  shell: docker exec -i mariadb mysql -uroot -p{{ ourcompose_mariadb_root_password }} <<< "{{ ourcompose_commandcenter_mariadb_script }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ ourcompose_common_no_log }}"

- name: (present) Ensure commandcenter_credentials directory exists
  file:
    path: "/srv/{{ ourcompose_commandcenter_storage }}/commandcenter_credentials"
    state: directory

- name: Create credentials files
  # So, let's review POSIX standards, shall we?
  #
  #     3.206 Line
  #     A sequence of zero or more non- <newline> characters plus a terminating
  #     <newline> character.
  #
  # So, these _files_, as we graciously call what we are templating below,
  # contain no lines. Now, wouldn't that mean that they are blank files? No! To
  # the contrary according to ruby developers around the world. These files are
  # to the standard of these blaggards who snub the very idea of
  # interoperability. So, be aware! These files **MUST** not have a line that
  # ends in a newline.
  template:
    src: 'commandcenter_{{ item }}.j2'
    dest: "/srv/{{ ourcompose_commandcenter_storage }}/commandcenter_credentials/{{ item }}"
    mode: 0600
    owner: root
  loop:
    - 'production.key'
    - 'production.yml.enc'

- name: (present) Determine whether the commandcenter service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep commandcenter
  failed_when: False
  register: ourcompose_commandcenter_existing

- name: Deploy Container
  block:
    - name: (present) The commandcenter service version {{ ourcompose_commandcenter_version }} is built and {{ ourcompose_commandcenter_state }}
      docker_service:
        project_name: commandcenter
        definition:
          version: '3.6'
          services:
              commandcenter:
                  image: "compositionalenterprises/commandcenter:{{ ourcompose_commandcenter_version }}"
                  container_name: commandcenter
                  restart: always
                  volumes:
                      - "/srv/{{ ourcompose_commandcenter_storage }}/commandcenter_credentials:/app/config/credentials"
                  networks:
                      - frontend
                      - backend
                  environment:
                    DB_HOST: 'mariadb'
                    DB_NAME: 'commandcenter'
                    DB_USER: 'commandcenter'
                    DB_PASS: "{{ ourcompose_commandcenter_backend_password }}"
                    RAILS_RELATIVE_URL_ROOT: '/commandcenter'
                    ADMIN_EMAIL: "{{ ourcompose_common_admin }}@{{ ourcompose_common_domain }}"
                    ADMIN_PASSWORD: "{{ ourcompose_commandcenter_admin_password }}"
                    HOST: "https://{{ ourcompose_common_domain }}"
                  healthcheck:
                    test: "{{ ourcompose_commandcenter_healthcheck }}"
                    interval: 5s
                    timeout: 30s
                    retries: 3

          networks:
              frontend:
                  external: true
              backend:
                  external: true

        pull: "{{ ourcompose_commandcenter_pull }}"
        state: "{{ ourcompose_commandcenter_state }}"
        # If the container is not already present, we don't want to pass
        # the 'restarted' parameter, we just want it restarted regularly.
        restarted: "{{ not ourcompose_commandcenter_existing['rc'] }}"
      register: ourcompose_commandcenter_output
      timeout: 200
      no_log: "{{ ourcompose_common_no_log }}"

  rescue:
    - name: (present) Forcibly clean the docker cache
      command: docker system prune -a -f

    - name: (present) The commandcenter service version {{ ourcompose_commandcenter_version }} is built and {{ ourcompose_commandcenter_state }}
      docker_service:
        project_name: commandcenter
        definition:
          version: '3.6'
          services:
              commandcenter:
                  image: "compositionalenterprises/commandcenter:{{ ourcompose_commandcenter_version }}"
                  container_name: commandcenter
                  restart: always
                  volumes:
                      - "/srv/{{ ourcompose_commandcenter_storage }}/commandcenter_credentials:/app/config/credentials"
                  networks:
                      - frontend
                      - backend
                  environment:
                    DB_HOST: 'mariadb'
                    DB_NAME: 'commandcenter'
                    DB_USER: 'commandcenter'
                    DB_PASS: "{{ ourcompose_commandcenter_backend_password }}"
                    RAILS_RELATIVE_URL_ROOT: '/commandcenter'
                    ADMIN_EMAIL: "{{ ourcompose_common_admin }}@{{ ourcompose_common_domain }}"
                    ADMIN_PASSWORD: "{{ ourcompose_commandcenter_admin_password }}"
                    HOST: "https://{{ ourcompose_common_domain }}"
                  healthcheck:
                    test: "{{ ourcompose_commandcenter_healthcheck }}"
                    interval: 5s
                    timeout: 30s
                    retries: 3

          networks:
              frontend:
                  external: true
              backend:
                  external: true

        pull: "{{ ourcompose_commandcenter_pull }}"
        state: "{{ ourcompose_commandcenter_state }}"
        # If the container is not already present, we don't want to pass
        # the 'restarted' parameter, we just want it restarted regularly.
        restarted: "{{ not ourcompose_commandcenter_existing['rc'] }}"
        timeout: 200
      register: ourcompose_commandcenter_output
      no_log: "{{ ourcompose_common_no_log }}"

- name: (present) The commandcenter cron job to update the database with daily data
  cron:
    name: "CC Update Data"
    hour: "4"
    day: "*"
    job: "/usr/bin/docker exec commandcenter /app/bin/seeds/daily.sh"

- name: (present) Set up the bind mountpoints
  ansible.builtin.import_role:
    name: compositionalenterprises.ourcompose.bind_mountpoints
  vars:
    ourcompose_bind_mountpoints_mountpoints: "{{ ourcompose_commandcenter_bind_mountpoints }}"
    ourcompose_bind_mountpoints_container: 'commandcenter'

#
# Admin Password
#
- name: (present) CommandCenter has all of its database migrations ran
  shell: "
    docker exec -i commandcenter sh -c \"
      export RAILS_ENV=production;
        bundle exec rake db:migrate:status 2>/dev/null |
          sed '/^$/d' |
          tail -n 1 |
          tr -s ' ' |
          cut -d ' ' -f 2
      \"
    "
  register: ourcompose_commandcenter_migrations
  until: "'up' in ourcompose_commandcenter_migrations['stdout']"
  retries: 24
  delay: 5

- name: (present) Create the admin account
  # Update or Add admin script example
  # See /app/bin/rake_admin.sh script on server for env vars
  shell: "
    docker exec -i
        -e CC_ADMIN_CREATE_UPDATE=CREATE
        -e CC_ADMIN_EMAIL=admin@{{ ourcompose_common_domain }}
        -e CC_ADMIN_PASSWORD={{ ourcompose_commandcenter_admin_password }}
        -e CC_ADMIN_SEND_EMAIL_FLAG=NO commandcenter
      '/app/bin/seeds/rake_admin.sh'
    "
  register: ourcompose_commandcenter_create_admin
  failed_when: False
    #  - ourcompose_commandcenter_create_admin['rc'] not in [0, 127]
