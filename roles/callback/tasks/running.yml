---
- name: (running) Place build files in tmp dir
  copy:
    src: "../files/{{ item }}"
    dest: '/var/tmp/callback_build_dir/'
  loop:
    - 'setup_privkey.sh'
    - 'teardown_privkey.sh'
    - 'Dockerfile'
    - 'entrypoint.sh'

- name: (running) Chmod build files appropriately
  file:
    path: '/var/tmp/callback_build_dir/{{ item }}'
    mode: +x
  loop:
    - 'setup_privkey.sh'
    - 'teardown_privkey.sh'
    - 'entrypoint.sh'

- name: (running) Determine whether the callback service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep callback
  failed_when: False
  register: ourcompose_callback_existing

- name: (running) The latest callback service is {% if not ourcompose_callback_existing['rc'] %}re{% endif %}started
  docker_compose:
    project_name: callback
    definition:
      version: '3.6'
      services:
          callback:
              image: "local/callback:latest"
              build:
                context: /var/tmp/callback_build_dir/
                dockerfile: Dockerfile
              container_name: 'callback'
              restart: always
              ports:
                - "9022:22"
              cap_add:
                - LINUX_IMMUTABLE
              environment:
                CALLBACK_USER: "{{ ourcompose_callback_user }}"
                CALLBACK_KEYS: "{{ ourcompose_callback_keys }}"
              healthcheck:
                test: "{{ ourcompose_callback_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
    build: yes
    state: present
    # If the container is not already present, we don't want to pass
    # the 'restarted' parameter, we just want it restarted regularly.
    restarted: "{{ not ourcompose_callback_existing['rc'] }}"
    timeout: 200
  register: ourcompose_callback_output
