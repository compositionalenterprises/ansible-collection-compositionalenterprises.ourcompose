---
- name: (running) Nginx conf is deployed
  template:
    src: "nginx_nextcloud.conf.j2"
    dest: "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/{{ ourcompose_common_domain }}/nextcloud.conf"

- name: (running) Set up the mariadb database
  shell: docker exec -i mariadb mysql -uroot -p{{ ourcompose_mariadb_root_password }} <<< "{{ ourcompose_nextcloud_mariadb_present }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ ourcompose_common_no_log }}"

- name: (running) Determine whether the nextcloud service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep nextcloud
  failed_when: False
  register: ourcompose_nextcloud_existing

- name: (running) The nextcloud service is {% if not ourcompose_nextcloud_existing['rc'] %}re{% endif %}started
  docker_compose:
    project_name: nextcloud
    definition:
      version: '3.6'
      services:
          nextcloud:
              image: "nextcloud:{{ ourcompose_nextcloud_version }}"
              container_name: nextcloud
              restart: always
              volumes:
                - "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_data:/var/www/html/data"
                - "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_config:/var/www/html/config"
                - "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_themes:/var/www/html/themes"
                - "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_custom_apps:/var/www/html/custom_apps"
              networks:
                - frontend
                - backend
              environment:
                MYSQL_HOST: "mariadb"
                MYSQL_DATABASE: "nextcloud"
                MYSQL_USER: "nextcloud"
                MYSQL_PASSWORD: "{{ ourcompose_nextcloud_backend_password }}"
                NEXTCLOUD_ADMIN_USER: "{{ ourcompose_nextcloud_admin_user }}"
                NEXTCLOUD_ADMIN_PASSWORD: "{{ ourcompose_nextcloud_admin_password }}"
                NEXTCLOUD_TRUSTED_DOMAINS: "{{ ourcompose_common_domain }} nextcloud"
              healthcheck:
                test: "{{ ourcompose_nextcloud_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
      networks:
          frontend:
              external: true
          backend:
              external: true
    pull: yes
    state: present
    # If the container is not already present, we don't want to pass
    # the 'restarted' parameter, we just want it restarted regularly.
    restarted: "{{ not ourcompose_nextcloud_existing['rc'] }}"
    timeout: 200
  register: ourcompose_nextcloud_output_1
  no_log: "{{ ourcompose_common_no_log }}"

#
# Install/Upgrade Nextcloud as necessary
#
- name: (running) Get nextcloud status
  shell: docker exec -u 33 -i nextcloud bash -c "curl -SL http://localhost/status.php"
  register: ourcompose_nextcloud_status_result
  until: ourcompose_nextcloud_status_result['stdout'].startswith('{')
  retries: 24
  delay: 5

- name: (running) Create nextcloud status variable
  set_fact:
    ourcompose_nextcloud_status: "{{ ourcompose_nextcloud_status_result['stdout'] | from_json }}"

- name: (running) Install Nextcloud
  shell: docker exec -u 33 -i nextcloud bash -c "./occ maintenance:install --admin-user 'admin' --admin-pass '{{ ourcompose_nextcloud_admin_password }}'"
  when: not ourcompose_nextcloud_status['installed']

- name: (running) Upgrade Nextcloud DB
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ upgrade --no-interaction"'
  when: ourcompose_nextcloud_status['needsDbUpgrade']

- name: (running) Update Installed Applications
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ app:update --all"'

- name: (running) Turn off maintenance moce
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ maintenance:mode --off"'
  when: ourcompose_nextcloud_status['maintenance']
#
# Set up config files
#
- name: (running) Make sure Nextcloud has fully initialized
  shell: 'docker exec -i nextcloud bash -c "ps -ef | grep apache2 | grep -ve grep -e entrypoint"'
  retries: 15
  delay: 15
  register: nextcloud_initialized
  until: nextcloud_initialized['rc'] == 0

- name: (running) config.php is configured with overwritewebroot
  lineinfile:
    path: "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_config/config.php"
    insertafter: "overwrite.cli.url"
    line: "{{ item }}"
  loop:
    - "  'overwritewebroot' => '/nextcloud',"
    - "  'overwriteprotocol' => 'https',"
  notify: restart_nextcloud

- name: (running) config.php is configured with dbtableprefix
  lineinfile:
    path: "/srv/{{ ourcompose_nextcloud_storage }}/nextcloud_config/config.php"
    regexp: "dbtableprefix"
    line: "  'dbtableprefix' => 'oc_',"
  when: ourcompose_nextcloud_legacy_dbtableprefix
  notify: restart_nextcloud

- name: (running) Set up cron job for background tasks
  cron:
    name: 'Nextcloud Background Tasks'
    minute: '*/5'
    job: '/usr/bin/docker exec -u 33 nextcloud php -f cron.php'

- name: (running) Gather the list of applications present in the nextcloud instance
  shell:
    cmd: 'docker exec -iu 33 nextcloud bash -c "./occ app:list"'
  failed_when: False
  register: ourcompose_nextcloud_app_list

- name: (running) Change the refresh period of calendar subscriptions
  shell:
    cmd: 'docker exec -iu 33 nextcloud bash -c "php occ config:app:set dav calendarSubscriptionRefreshRate --value \"P20M\""'
  when: "'calendar' in ourcompose_nextcloud_app_list['stdout']"

- name: (running) Get trusted domains
  shell: docker exec -u 33 -i nextcloud bash -c "php occ config:system:get trusted_domains"
  register: ourcompose_nextcloud_get_trusted_domains

- name: (running) Add missing trusted domains
  shell: docker exec -u 33 -i nextcloud bash -c "php occ config:system:set trusted_domains {{ item['number'] }} --value={{ item['domain'] }}"
  when: item['domain'] not in ourcompose_nextcloud_get_trusted_domains['stdout_lines']
  loop:
    - { number: "{{ ourcompose_nextcloud_get_trusted_domains['stdout_lines'] | length }}", domain: "{{ ourcompose_common_domain }}" }
    - { number: "{{ ourcompose_nextcloud_get_trusted_domains['stdout_lines'] | length + 1 }}", domain: 'nextcloud' }

- name: (running) Flush handlers to restart nextcloud before setting up the bind mountpoints
  meta: flush_handlers

- name: (running) Set up the bind mountpoints
  ansible.builtin.import_role:
    name: compositionalenterprises.ourcompose.bind_mountpoints
  vars:
    ourcompose_bind_mountpoints_mountpoints: "{{ ourcompose_nextcloud_bind_mountpoints }}"
    ourcompose_bind_mountpoints_container: 'nextcloud'
