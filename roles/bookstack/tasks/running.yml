---
- name: (running) Nginx conf is deployed
  template:
    src: "nginx_bookstack.conf.j2"
    dest: "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/{{ ourcompose_common_domain }}/bookstack.conf"

- name: (running) Set up the MySQL mariadb
  shell: docker exec -i mariadb mysql -uroot -p{{ ourcompose_mariadb_root_password }} <<< "{{ ourcompose_bookstack_mariadb_present }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ ourcompose_common_no_log }}"

- name: (running) Move the storage to the appropriate location
  ansible.builtin.import_role:
    name: compositionalenterprises.ourcompose.move_storage
  vars:
    ourcompose_move_storage_service: 'bookstack'
  when: ourcompose_bookstack_storage == 'remote'

- name: (running) Ensure bookstack volume directories exist and have correct ownership
  file:
    path: "/srv/{{ ourcompose_bookstack_storage }}/bookstack_{{ item }}"
    owner: 33
    group: 33
    recurse: True
    state: directory
  loop:
    - 'uploads'
    - 'storage'

- name: (running) Determine whether the bookstack service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep bookstack
  failed_when: False
  register: ourcompose_bookstack_existing

- name: (running) The latest bookstack service is {% if not ourcompose_bookstack_existing['rc'] %}re{% endif %}started
  docker_compose:
    project_name: bookstack
    definition:
      version: '3.6'
      services:
          bookstack:
              image: "solidnerd/bookstack:{{ ourcompose_bookstack_version }}"
              container_name: bookstack
              restart: always
              volumes:
                  - "/srv/{{ ourcompose_bookstack_storage }}/bookstack_uploads:/var/www/bookstack/public/uploads"
                  - "/srv/{{ ourcompose_bookstack_storage }}/bookstack_storage:/var/www/bookstack/public/storage"
              networks:
                  - frontend
                  - backend
              environment:
                DB_HOST: 'mariadb'
                DB_DATABASE: 'bookstack'
                DB_USERNAME: 'bookstack'
                DB_PASSWORD: "{{ ourcompose_bookstack_backend_password }}"
                DISABLE_EXTERNAL_SERVICES: 'true'
                APP_URL: "https://{{ ourcompose_common_domain }}/bookstack"

              healthcheck:
                test: "{{ ourcompose_bookstack_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3

      networks:
          frontend:
              external: true
          backend:
              external: true
      volumes:
        nginx:
    pull: yes
    state: present
    # If the container is not already present, we don't want to pass
    # the 'restarted' parameter, we just want it restarted regularly.
    restarted: "{{ not ourcompose_bookstack_existing['rc'] }}"
    timeout: 200
  register: ourcompose_bookstack_output
  no_log: "{{ ourcompose_common_no_log }}"

- name: (running) Reset the bind mountpoints in order to get Kanboard healthy
  ansible.builtin.import_role:
    name: compositionalenterprises.ourcompose.bind_mountpoints
  vars:
    ourcompose_bind_mountpoints_mountpoints: "{{ ourcompose_bookstack_bind_mountpoints }}"
    ourcompose_bind_mountpoints_container: 'bookstack'


#
# Admin Password
#
- name: (running) Install Tinker
  shell: "
    docker exec -i bookstack bash -c '
      COMPOSER_MEMORY_LIMIT=-1 /var/www/bookstack/vendor/composer/composer/bin/composer require laravel/tinker'
    "

- name: (running) Set the admin user's password
  # While it's crap that we have to use double escapes, it's the only way that bash doesn't throw
  # an error when passing the parenthesis.
  shell: "
    docker exec -u 0 -i bookstack bash -c \"
      echo -e '
        \\$user = Bookstack\\Auth\\User::where(\\\"email\\\", \\\"admin@admin.com\\\")->first();
        \\$user->password = Hash::make(\\\"{{ ourcompose_bookstack_admin_password }}\\\");
        \\$user->save();'
      | php artisan tinker\"
    "
