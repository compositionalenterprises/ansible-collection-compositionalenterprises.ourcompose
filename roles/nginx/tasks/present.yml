---
- name: Bind mounts directories are present
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d"
    - "/srv/{{ ourcompose_nginx_storage }}/nginx_html"

- name: (present) Nginx default.conf is deployed
  template:
    src: nginx_default.conf.j2
    dest: "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/default.conf"

- name: (present) Nginx robots.txt is deployed
  template:
    src: nginx_robots.txt.j2
    dest: "/srv/{{ ourcompose_nginx_storage }}/nginx_html/robots.txt"

- name: (present) Determine whether the nginx service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep nginx
  failed_when: False
  register: ourcompose_nginx_existing

- name: (present) The latest nginx service is built and present
  docker_compose:
    project_name: nginx
    definition:
      version: '3.6'
      services:
          nginx:
              image: 'nginx:{{ ourcompose_nginx_version }}'
              container_name: nginx
              restart: always
              ports:
                  - "80:80"
                  - "443:443"
              volumes:
                  - "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d:/etc/nginx/conf.d"
                  - "/srv/{{ ourcompose_nginx_storage }}/nginx_html:/usr/share/nginx/html"
                  - "/srv/{{ ourcompose_nginx_storage }}/nginx_logs:/var/log/nginx/services"
                  - "{{ ourcompose_common_cert_volume }}"
              networks:
                  - frontend
              healthcheck:
                test: "{{ ourcompose_nginx_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
      networks:
          frontend:
              name: frontend
    pull: "{{ ourcompose_nginx_pull }}"
    state: "{{ ourcompose_nginx_state }}"
    # If the container is not already present, we don't want to pass
    # the 'restarted' parameter, we just want it restarted regularly.
    restarted: "{{ not ourcompose_nginx_existing['rc'] and ourcompose_nginx_restarted }}"
    timeout: 200
  register: frontend_output

# TODO: This would be nice to avoid having errors in nginx setup if the services are breaking
#- name: (present) Services directory is empty
#  shell:
#    cmd: "rm -rf /srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/{{ ourcompose_common_domain }}/*"

- name: (present) Check for domain redirects' certs
  stat:
    path: "{{ ourcompose_common_cert_volume.split(':')[0] }}/{{ item['cert'] }}"
  loop: "{{ ourcompose_common_domain_redirects }}"
  register: ourcompose_common_domain_redirects_certs_stat

- name: (present) Add certs key-value to domain redirects certs dict
  set_fact:
    ourcompose_nginx_domain_redirects_certs: "{{ ourcompose_nginx_domain_redirects_certs | default({}) | combine({item['item']['domain']: item['stat']['exists']}) }}"
  loop: "{{ ourcompose_common_domain_redirects_certs_stat['results'] }}"

- name: (present) Services directory is created
  file:
    path: "/srv/{{ ourcompose_nginx_storage }}/nginx_conf.d/{{ ourcompose_common_domain }}"
    state: directory
