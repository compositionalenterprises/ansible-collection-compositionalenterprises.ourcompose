---
- name: (dolibarr) Nginx conf is deployed
  template:
    src: "nginx_dolibarr.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/dolibarr.conf"
  notify: 'Restart Frontend'

- name: (dolibarr) The MySQL database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: "{{ compositional_no_log }}"

- name: (dolibarr) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_dolibarr_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ compositional_no_log }}"

- name: (dolibarr) Determine whether the dolibarr service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep dolibarr
  failed_when: False
  register: compositional_dolibarr_existing

- name: (dolibarr) The latest dolibarr service is built and {{ compositional_dolibarr_state }}
  docker_compose:
    project_name: dolibarr
    definition:
      version: '3.6'
      services:
          dolibarr:
              image: "upshift/dolibarr:{{ compositional_dolibarr_version }}"
              container_name: dolibarr
              restart: always
              volumes:
                  - "/srv/{{ compositional_dolibarr_storage }}/dolibarr_html:/var/www/html/"
                  - "/srv/{{ compositional_dolibarr_storage }}/dolibarr_documents:/var/www/documents/"
              networks:
                  - frontend
                  - backend
              environment:
                DOLI_DB_TYPE: 'mysqli'
                DOLI_DB_HOST: 'database'
                DOLI_DB_NAME: 'dolibarr'
                DOLI_DB_USER: 'dolibarr'
                DOLI_DB_PASSWORD: "{{ compositional_dolibarr_backend_password }}"
                DOLI_ADMIN_LOGIN: 'admin'
                DOLI_ADMIN_PASSWORD: "{{ compositional_dolibarr_admin_password }}"
                DOLI_MODULES: "{{ compositional_dolibarr_modules }}"
                DOLI_URL_ROOT: "https://{{ environment_domain }}/dolibarr"
                DOLI_HTTPS: "0"
                DOLI_NO_CSRF_CHECK: "1"
                LANG: "en_US"
              healthcheck:
                test: "{{ compositional_dolibarr_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
      networks:
          frontend:
              external: true
          backend:
              external: true
      volumes:
        nginx:
    pull: "{{ compositional_dolibarr_pull }}"
    state: "{{ compositional_dolibarr_state }}"
    restarted: "{{ not compositional_dolibarr_existing['rc'] }}"
    timeout: 200
  register: compositional_dolibarr_output
  no_log: "{{ compositional_no_log }}"

- name: (dolibarr) Wait for dolibarr to initialize
  shell: docker logs --since 6m dolibarr 2>&1 | grep 'exec /usr/sbin/httpd -DFOREGROUND'
  register: compositional_dolibarr_server_running
  until: compositional_dolibarr_server_running['rc'] == 0
  retries: 72
  delay: 5

- name: (dolibarr) Symlink dolibarr directory
  shell: docker exec -i dolibarr bash -c "ln -snfT {{ item['target'] }} {{ item['link'] }}"
  loop:
    # First we link htdocs since that is the baseURL for apache to /var/www. That means
    # the `/` of the webserver will serve `/var/www/`, and `/dolibarr` will serve `/var/www/dolibarr`
    - {target: '/var/www', 'link': '/var/www/localhost/htdocs'}
    # Then we link `/var/www/dolibarr` to `/var/www/html`, where the _actual_ app is stored.
    - {target: '/var/www/html', 'link': '/var/www/dolibarr'}

- name: (dolibarr) Set up the admin API key in the database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} dolibarr <<< "update llx_user set api_key = '{{ compositional_dolibarr_admin_api_key }}' where login = 'admin'"
  args:
    executable: '/bin/bash'
  no_log: "{{ compositional_no_log }}"

#
# Bind Mountpoints
#
- name: (dolibarr) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} dolibarr | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_dolibarr_bind_mountpoints }}"
  register: compositional_dolibarr_src_dirs

- name: (dolibarr) Register dolibarr non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_dolibarr_src_dirs['results'] }}"

- name: (dolibarr) Register dolibarr volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_dolibarr_bind_mountpoints }}"
