- name: (suitecrm) Nginx conf is deployed
  template:
    src: "nginx_suitecrm.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/suitecrm.conf"
  notify: 'Restart Frontend'

- name: (suitecrm) The database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: "{{ compositional_no_log }}"

- name: (suitecrm) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_suitecrm_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ compositional_no_log }}"

- name: (suitecrm) Determine whether the suitecrm service is existing yet
  shell:
    cmd: docker ps -a | tr -s ' ' | rev | cut -d ' ' -f 1 | rev | grep suitecrm
  failed_when: False
  register: compositional_suitecrm_existing

- name: (suitecrm) The latest suitecrm service is built and {{ compositional_suitecrm_state }}
  docker_compose:
    project_name: suitecrm
    timeout: 200
    definition:
      version: '3.6'
      services:
        suitecrm:
          image: "bitnami/suitecrm:{{ compositional_suitecrm_version }}"
          container_name: suitecrm
          restart: always
          volumes:
            - "/srv/{{ compositional_suitecrm_storage }}/suitecrm_suitecrm:/bitnami/suitecrm"
          networks:
            - frontend
            - backend
          environment:
            SUITECRM_HOST: '{{ environment_domain }}'
            SUITECRM_DATABASE_HOST: "database"
            SUITECRM_DATABASE_NAME: 'suitecrm'
            SUITECRM_DATABASE_USER: 'suitecrm'
            SUITECRM_DATABASE_PASSWORD: "{{ compositional_suitecrm_backend_password }}"
            SUITECRM_SERVER_URL: "https://{{ environment_domain }}/suitecrm"
            SUITECRM_USERNAME: 'admin'
            SUITECRM_PASSWORD: "{{ compositional_suitecrm_admin_password }}"
          healthcheck:
            test: "{{ compositional_suitecrm_healthcheck }}"
            interval: 5s
            timeout: 30s
            retries: 3
      networks:
        frontend:
          external: true
        backend:
          external: true
    pull: "{{ compositional_suitecrm_pull }}"
    state: "{{ compositional_suitecrm_state }}"
    # If the container is not already present, we don't want to pass
    # the 'restarted' parameter, we just want it restarted regularly.
    restarted: "{{ not compositional_suitecrm_existing['rc'] }}"
    timeout: 200
  register: compositional_suitecrm_output
  notify: 'Restart Frontend'
  no_log: "{{ compositional_no_log }}"

- name: (suitecrm) Wait for suitecrm to initialize its setup routines
  shell:
    cmd: docker logs --since 6m suitecrm 2>&1 | grep '** SuiteCRM setup finished! **'
  register: compositional_suitecrm_server_running
  until: compositional_suitecrm_server_running['rc'] == 0
  retries: 12
  delay: 5

- name: (suitecrm) Symlink suitecrm directory as a subdirectory
  shell: docker exec -iu 1 suitecrm bash -c "ln -snfT /bitnami/suitecrm /bitnami/suitecrm/suitecrm"

#
# Bind Mountpoints
#
- name: (suitecrm) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} suitecrm | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_suitecrm_bind_mountpoints }}"
  register: compositional_suitecrm_src_dirs

- name: (suitecrm) Register suitecrm non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_suitecrm_src_dirs['results'] }}"

- name: (suitecrm) Register suitecrm volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_suitecrm_bind_mountpoints }}"

- name: (suitecrm) Reset the bind mountpoints
  include_tasks: ./bind_mountpoints.yml

#
# Place script to create user admin
#
# This will result in an additional command that can be called like so:
# 
#   /bitnami/suitecrm/vendor/consolidation/robo/robo create:user user10 testpassword true
#
- name: (suitecrm) Place the file into /tmp
  copy:
    src: ../files/suitecrm_CreateUserCommands.php
    dest: /tmp/CreateUserCommands.php

- name: (suitecrm) Copy the file into the docker container
  shell:
    cmd: docker cp /tmp/CreateUserCommands.php suitecrm:/bitnami/suitecrm/lib/Robo/Plugin/Commands

- name: (suitecrm) Make robo executable
  shell:
    cmd: docker exec -i suitecrm chmod +x /bitnami/suitecrm/vendor/consolidation/robo/robo

- name: (suitecrm) Make sure that Composer picks up the new files
  shell:
    cmd: docker exec -iw /bitnami/suitecrm suitecrm composer dump-autoload
