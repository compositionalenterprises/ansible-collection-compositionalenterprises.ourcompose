---
- name: Install Skeleton
  hosts: all
  become: yes
  vars_files:
    - ../environment/group_vars/all/all.yml
  vars:
    docker__pip_packages:
      - "docker"
      - "python-apt"
    certbot_auto_renew_options: "--quiet --no-self-upgrade --pre-hook='docker stop proxy' --post-hook='docker exec -it portal \"/app/bin/run_compositional_role.sh\"'"
    certbot_admin_email: "{{ environment_admin }}@{{ environment_domain }}"
    certbot_create_if_missing: True
    certbot_install_from_source: False
    certbot_create_standalone_stop_services:
      - 'docker'
    certbot_certs:
      - domains: "{{ [environment_domain] + compositional_domain_redirects | default({}) | map(attribute='domain') | list }}"
  pre_tasks:
    - name: Update all packages on the system
      apt:
        name: '*'
        state: latest
        update_cache: True
      register: pkg_install
      retries: 60
      delay: 5
      # Here we're also saying to retry on if we're facing a 'could not get lock'.
      # The second part of the clause after the `or` here is saying:
      #   If the 'msg' is defined (rc != 0), we'll consider the retries complete
      #   if we are unable to find 'Failed...|Could...' in that 'msg'.
      until: pkg_install['msg'] is not defined or (
        pkg_install['msg'] is defined and
        not pkg_install['msg'] | regex_search('Failed to lock apt|Could not get lock'))
      # Finally, we fail if we exit those retries with a 'msg' that does not include
      # the 'Failed...|Changed...' text. Basically, we fail if we are unable to find
      # the acceptable failure reason, and there is some other reason in the 'msg' why
      # we failed. We should troubleshoot that failure manually.
      failed_when:
        - pkg_install['msg'] is defined
        - not pkg_install['msg'] | regex_search('Failed to lock apt|Could not get lock')

    #
    # TODO: LEGACY
    #
    - name: Determine presence of legacy python-docker
      stat:
        path: '/usr/local/bin/python-docker'
      register: install_services_python_docker

    - name: Link the python version for legacy clients
      file:
        src: '/usr/local/bin/python-docker'
        path: '/usr/local/bin/python3-docker'
        state: link
      when: install_services_python_docker['exists'] is defined

  roles:
    - role: swapfile
      swapfile_size: '4G'
    - role: docker
    - role: certbot
    - role: compositional
      tags: ['comp']
      ansible_python_interpreter: "/usr/bin/env python3-docker"
      # Here we're only installing the proxy and the database
      compositional_setup_services: False

  post_tasks:
    - name: Create podcast download-tracking script on ourcompose.com
      block:
        - name: Create episode_stats directory
          file:
            path: "/srv/local/nginx_episode_stats"
            state: directory

        - name: Place the script
          copy:
            src: ../files/episode_stats.sh
            dest: /root/episode_stats.sh
            mode: 0755

        - name: Add cronjob to run at the top of every hour
          cron:
            name: "Run the episode stats report"
            special_time: "hourly"
            job: /root/episode_stats.sh

      when: "'{{ environment_domain }}' == 'ourcompose.com'"
      tags: ['comp']
